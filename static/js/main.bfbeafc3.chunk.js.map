{"version":3,"sources":["components/Title.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Title","className","unirest","require","FormInputs","props","onDropdownCountry","e","state","target","value","stateCheck","headers","token","end","dataValues","body","setState","onDropdownCity","city","cityCheck","country","console","log","this","refreshList","checkCountry","result","auth_token","data","Form","onSubmit","getWeather","FormGroup","Label","for","sm","style","color","Col","Input","type","defaultValue","name","onChange","disabled","map","key","country_short_name","country_name","state_name","city_name","Button","Component","Weather","icon","faMapPin","temperature","faSun","humidity","faMapMarker","description","faPenAlt","error","API_KEY","App","a","elements","preventDefault","fetch","api_call","json","cod","main","temp","sys","weather","undefined","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.bfbeafc3.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Title = () => (\r\n    <div>\r\n        <h1 className=\"title-container__title\">Weather Finder</h1>\r\n        <h3 className=\"title-container__subtitle\">Find out temperature, conditions and more...</h3>\r\n    </div>\r\n)\r\nexport default Title\r\n","import React, { Component } from 'react'\r\nimport { Button, Form, FormGroup, Label, Input, Col } from 'reactstrap';\r\nvar unirest = require('unirest');\r\n\r\n\r\nclass FormInputs extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            country: [],\r\n            city: [],\r\n            state: [],\r\n            token: '',\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        console.log(\"Developed By Sajidkhaki\")\r\n        this.refreshList()\r\n    }\r\n    refreshList() {\r\n        let checkCountry = []\r\n        let req = unirest(\"GET\", \"https://www.universal-tutorial.com/api/getaccesstoken\");\r\n        req.headers({\r\n            \"Accept\": \"application/json\",\r\n            \"api-token\": \"hz0bOK6sBfc_dxrG3aj0VKOI96oS4JVewoqD2InLhtQPIAEcAr_yTl3f5FkQWICzoKE\",\r\n            \"user-email\": \"sajid@eresolute.com\"\r\n        })\r\n            .end((result) => {\r\n                //console.log('Token', result.body.auth_token);\r\n                this.setState({\r\n                    token: result.body.auth_token\r\n                })\r\n                var request2 = unirest(\"GET\", \"https://www.universal-tutorial.com/api/countries/\");\r\n                request2.headers({\r\n                    \"Authorization\": `Bearer ${this.state.token}`,\r\n                    \"Accept\": \"application/json\"\r\n                })\r\n                    .end((data) => {\r\n                        checkCountry = data.body\r\n                        //console.log('check', checkCountry)\r\n                        this.setState({\r\n                            country: checkCountry\r\n                        })\r\n                    })\r\n            });\r\n    }\r\n    onDropdownCountry = (e) => {\r\n        //console.log(\"THE VAL\", e.target.value);\r\n        let state = e.target.value\r\n        let stateCheck = []\r\n        let request3 = unirest(\"GET\", `https://www.universal-tutorial.com/api/states/${state}`)\r\n        request3.headers({\r\n            \"Authorization\": `Bearer ${this.state.token}`,\r\n            \"Accept\": \"application/json\"\r\n        })\r\n            .end((dataValues) => {\r\n               // console.log('reStoo', dataValues.body)\r\n                stateCheck = dataValues.body\r\n                this.setState({\r\n                    state: stateCheck\r\n                })\r\n            })\r\n    }\r\n    onDropdownCity = (e) => {\r\n        //console.log(\"THE VAL\", e.target.value);\r\n        let city = e.target.value\r\n        let cityCheck = []\r\n        let request4 = unirest(\"GET\", `https://www.universal-tutorial.com/api/cities/${city}`)\r\n        request4.headers({\r\n            \"Authorization\": `Bearer ${this.state.token}`,\r\n        })\r\n            .end((dataValues) => {\r\n                //console.log('reStoo', dataValues.body)\r\n                cityCheck = dataValues.body\r\n                this.setState({\r\n                    city: cityCheck\r\n                })\r\n            })\r\n    }\r\n    render() {\r\n        const { country, city, state } = this.state\r\n        return (\r\n            <Form onSubmit={this.props.getWeather}>\r\n                <FormGroup>\r\n                    <Label for=\"select\" sm={2} style={{ color: \"yellow\" }}>Country</Label>\r\n                    <Col sm={10}>\r\n                        <Input type=\"select\" defaultValue={'DEFAULT'} name='country' onChange={this.onDropdownCountry} >\r\n                            <option value=\"DEFAULT\" disabled disabled>Select Country</option>\r\n                            {country.map((data) => {\r\n                                return (\r\n                                    <option key={data.country_short_name}\r\n                                        value={data.country_name}>\r\n                                        {data.country_name}</option>\r\n                                )\r\n                            })\r\n                            }\r\n                        </Input>\r\n                    </Col>\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Label for=\"select\" sm={2} style={{ color: \"yellow\" }}>State</Label>\r\n                    <Col sm={10}>\r\n                        <Input type=\"select\" defaultValue={'DEFAULT'} name='state' onChange={this.onDropdownCity}>\r\n                            <option value=\"DEFAULT\" disabled>Select State</option>\r\n                            {state.map((data) => {\r\n                                return (\r\n                                    <option key={data.state_name}\r\n                                        value={data.state_name}>\r\n                                        {data.state_name}</option>\r\n                                )\r\n                            })\r\n                            }\r\n                        </Input>\r\n                    </Col>\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Label for=\"select\" sm={2} style={{ color: \"yellow\" }}>City</Label>\r\n                    <Col sm={10}>\r\n                        <Input type=\"select\" defaultValue={'DEFAULT'} name='city' >\r\n                            <option value=\"DEFAULT\" disabled>Select City</option>\r\n                            {city.map((data) => {\r\n                                return (\r\n                                    <option key={data.city_name}\r\n                                        value={data.city_name}>\r\n                                        {data.city_name}</option>\r\n                                )\r\n                            })\r\n                            }\r\n                        </Input>\r\n                    </Col>\r\n                </FormGroup>\r\n                <Button>Get Weather</Button>\r\n            </Form >\r\n        )\r\n    }\r\n}\r\n\r\nexport default FormInputs","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faMapMarker, faSun, faMapPin, faPenAlt } from '@fortawesome/free-solid-svg-icons'\r\nconst Weather = props => {\r\n    return (\r\n        <div className=\"weather__info\">\r\n            {\r\n                props.city && props.country && <p className=\"weather__key\">\r\n                    <FontAwesomeIcon icon={faMapPin} /> Location:\r\n                    <span className=\"weather__value\"> {props.city}, {props.country}</span>\r\n                </p>\r\n            }\r\n            {\r\n                props.temperature && <p className=\"weather__key\">\r\n                    <FontAwesomeIcon icon={faSun} /> Temperature:\r\n                    <span className=\"weather__value\"> {props.temperature}\t</span>\r\n                </p>\r\n            }\r\n            {\r\n                props.humidity && <p className=\"weather__key\">\r\n                    <FontAwesomeIcon icon={faMapMarker} /> Humidity:\r\n                    <span className=\"weather__value\"> {props.humidity} </span>\r\n                </p>\r\n            } \r\n            {\r\n                props.description && <p className=\"weather__key\">\r\n                    <FontAwesomeIcon icon={faPenAlt} /> Description:\r\n                    <span className=\"weather__value\"> {props.description} </span>\r\n                </p>\r\n            }\r\n            {\r\n                props.error && <p className=\"weather__error\">{props.error}</p>\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default Weather\r\n","import React, { Component } from 'react'\r\nimport Title from './components/Title'\r\nimport Form from './components/Form'\r\nimport Weather from './components/Weather'\r\n\r\nconst API_KEY = \"5f5925f309b48c91b86caa5960fda964\"\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      temperature: undefined,\r\n      city: undefined,\r\n      country: undefined,\r\n      humidity: undefined,\r\n      description: undefined,\r\n      error: undefined\r\n    }\r\n  }\r\n  getWeather = async (e) => {\r\n    console.log(\"E\", e.target.elements.country.value)\r\n    e.preventDefault();\r\n    const city = e.target.elements.city.value;\r\n    const country = e.target.elements.country.value;\r\n    console.log('city', city)\r\n    console.log('city', country)\r\n    // e.target.elements.city.value = ''\r\n    // e.target.elements.country.value = ''\r\n    console.log(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`)\r\n    try {\r\n      const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\r\n      const data = await api_call.json();\r\n      if (data) {\r\n        if (city && country) {\r\n          if (data.cod != \"404\") {\r\n            this.setState({\r\n              temperature: data.main.temp,\r\n              city: data.name,\r\n              country: data.sys.country,\r\n              humidity: data.main.humidity,\r\n              description: data.weather[0].description,\r\n              error: \"\"\r\n            });\r\n          } else {\r\n            this.setState({\r\n              temperature: undefined,\r\n              city: undefined,\r\n              country: undefined,\r\n              humidity: undefined,\r\n              description: undefined,\r\n              error: \"Data not available for particular city\"\r\n            })\r\n          }\r\n        } else {\r\n          this.setState({\r\n            temperature: undefined,\r\n            city: undefined,\r\n            country: undefined,\r\n            humidity: undefined,\r\n            description: undefined,\r\n            error: \"Please enter the values.\"\r\n          })\r\n        }\r\n      } else {\r\n        console.log(\"cannot fetch\")\r\n      }\r\n    } catch (error) {\r\n      console.log('Error', error)\r\n      this.setState({\r\n        error: \"Please try again later\"\r\n      })\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"wrapper\">\r\n          <div className=\"main\">\r\n            <div className=\"container\">\r\n              <div className=\"row\">\r\n                <div className=\"col-lg-5 col-md-5 title-container\">\r\n                  <Title />\r\n                </div>\r\n                <div className=\"col-lg-6 col-md-6 form-container\">\r\n                  <Form getWeather={this.getWeather} />\r\n                  <Weather\r\n                    temperature={this.state.temperature}\r\n                    humidity={this.state.humidity}\r\n                    city={this.state.city}\r\n                    country={this.state.country}\r\n                    description={this.state.description}\r\n                    error={this.state.error}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default App\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css'\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}