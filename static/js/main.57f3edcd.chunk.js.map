{"version":3,"sources":["components/Title.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Title","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","icon","faMapPin","temperature","faSun","humidity","faMapMarker","description","faPenAlt","error","App","e","a","console","log","target","elements","value","preventDefault","fetch","api_call","json","data","cod","setState","main","temp","sys","weather","undefined","state","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.57f3edcd.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Title = () => (\r\n    <div>\r\n        <h1 className=\"title-container__title\">Weather Finder</h1>\r\n        <h3 className=\"title-container__subtitle\">Find out temperature, conditions and more...</h3>\r\n    </div>\r\n)\r\nexport default Title\r\n","import React from 'react'\r\n\r\nconst Form = props => {\r\n    return (\r\n        <form onSubmit={props.getWeather}>\r\n            <input type=\"text\" name=\"city\"  placeholder=\"City...\" />\r\n            <input type=\"text\" name=\"country\"  placeholder=\"Country...\" />\r\n            <button>Get Weather</button>\r\n        </form>\r\n    )\r\n}\r\nexport default Form","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faMapMarker, faSun, faMapPin, faPenAlt } from '@fortawesome/free-solid-svg-icons'\r\nconst Weather = props => {\r\n    return (\r\n        <div className=\"weather__info\">\r\n            {\r\n                props.city && props.country && <p className=\"weather__key\">\r\n                    <FontAwesomeIcon icon={faMapPin} /> Location:\r\n                    <span className=\"weather__value\"> {props.city}, {props.country}</span>\r\n                </p>\r\n            }\r\n            {\r\n                props.temperature && <p className=\"weather__key\">\r\n                    <FontAwesomeIcon icon={faSun} />Temperature:\r\n                    <span className=\"weather__value\"> {props.temperature}\t</span>\r\n                </p>\r\n            }\r\n            {\r\n                props.humidity && <p className=\"weather__key\">\r\n                    <FontAwesomeIcon icon={faMapMarker} />Humidity:\r\n                    <span className=\"weather__value\"> {props.humidity} </span>\r\n                </p>\r\n            }\r\n            {\r\n                props.description && <p className=\"weather__key\">\r\n                    <FontAwesomeIcon icon={faPenAlt} />Description:\r\n                    <span className=\"weather__value\"> {props.description} </span>\r\n                </p>\r\n            }\r\n            {\r\n                props.error && <p className=\"weather__error\">{props.error}</p>\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default Weather\r\n","import React, { Component } from 'react'\nimport Title from './components/Title'\nimport Form from './components/Form'\nimport Weather from './components/Weather'\n\nconst API_KEY = \"5f5925f309b48c91b86caa5960fda964\"\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      temperature: undefined,\n      city: undefined,\n      country: undefined,\n      humidity: undefined,\n      description: undefined,\n      error: undefined\n    }\n  }\n  getWeather = async (e) => {\n    console.log(\"E\", e.target.elements.city.value)\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    // e.target.elements.city.value = ''\n    // e.target.elements.country.value = ''\n    try {\n      const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\n      const data = await api_call.json();\n      if (data) {\n        if (city && country) {\n          if (data.cod != \"404\") {\n            this.setState({\n              temperature: data.main.temp,\n              city: data.name,\n              country: data.sys.country,\n              humidity: data.main.humidity,\n              description: data.weather[0].description,\n              error: \"\"\n            });\n          } else {\n            this.setState({\n              temperature: undefined,\n              city: undefined,\n              country: undefined,\n              humidity: undefined,\n              description: undefined,\n              error: \"Data not available for particular city\"\n            })\n          }\n        } else {\n          this.setState({\n            temperature: undefined,\n            city: undefined,\n            country: undefined,\n            humidity: undefined,\n            description: undefined,\n            error: \"Please enter the values.\"\n          })\n        }\n      } else {\n        console.log(\"cannot fetch\")\n      }\n    } catch (error) {\n      console.log('Error', error)\n      this.setState({\n        error: \"Please try again later\"\n      })\n    }\n  }\n  render() {\n    return (\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-xs-5 title-container\">\n                  <Title />\n                </div>\n                <div className=\"col-xs-7 form-container\">\n                  <Form getWeather={this.getWeather} />\n                  <Weather\n                    temperature={this.state.temperature}\n                    humidity={this.state.humidity}\n                    city={this.state.city}\n                    country={this.state.country}\n                    description={this.state.description}\n                    error={this.state.error}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}